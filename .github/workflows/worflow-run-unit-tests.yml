name: Unit Tests
on:
  push:
    branches:
      - master
  workflow_dispatch:
  pull_request:
jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build --continue
        continue-on-error: true

      - name: Run tests with Gradle
        run: ./gradlew testDebugUnitTest

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/build/test-results/testDebugUnitTest/
            **/build/reports/tests/testDebugUnitTest/

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: test-results

      - name: Install xmlstarlet
        run: sudo apt-get install -y xmlstarlet

      - name: Parse test results
        run: |
          TEST_RESULTS_DIR="test-results"

          # Initialize total counters
          total_tests=0
          total_skipped=0
          total_failures=0
          total_errors=0
          total_time=0

          # Iterate through each XML file in the directory
          for file in $(find "$TEST_RESULTS_DIR" -type f -name "*.xml"); do
            # Extract the required attributes using xmlstarlet
            tests=$(xmlstarlet sel -t -v "/testsuite/@tests" "$file")
            skipped=$(xmlstarlet sel -t -v "/testsuite/@skipped" "$file")
            failures=$(xmlstarlet sel -t -v "/testsuite/@failures" "$file")
            errors=$(xmlstarlet sel -t -v "/testsuite/@errors" "$file")
            time=$(xmlstarlet sel -t -v "/testsuite/@time" "$file")

            # Sum the values to the total counters
            total_tests=$((total_tests + tests))
            total_skipped=$((total_skipped + skipped))
            total_failures=$((total_failures + failures))
            total_errors=$((total_errors + errors))
            total_time=$(echo "$total_time + $time" | bc)
          done

          # Print the total amounts
          echo "Total tests: $total_tests"
          echo "Total skipped: $total_skipped"
          echo "Total failures: $total_failures"
          echo "Total errors: $total_errors"
          echo "Total time: $total_time"

          # Set the output for GitHub Actions using environment files
          echo "total_tests=$total_tests" >> $GITHUB_ENV
          echo "total_skipped=$total_skipped" >> $GITHUB_ENV
          echo "total_failures=$total_failures" >> $GITHUB_ENV
          echo "total_errors=$total_errors" >> $GITHUB_ENV
          echo "total_time=$total_time" >> $GITHUB_ENV

      - name: Comment on PR
        if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
        uses: actions/github-script@v6
        with:
          script: |
            const totalTests = process.env.total_tests;
            const totalSkipped = process.env.total_skipped;
            const totalFailures = process.env.total_failures;
            const totalErrors = process.env.total_errors;
            const totalTime = process.env.total_time;
            const summary = `Tests execution summary:\nExecuted: ${totalTests}\nSkipped: ${totalSkipped}\nFailed: ${totalFailures}\nErrors: ${totalErrors}\nTime: ${totalTime}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
